package propra.splitter.application;

import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.util.Set;
import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import propra.splitter.application.exceptions.NotAllowedException;
import propra.splitter.application.exceptions.NotPossibleException;
import propra.splitter.domain.model.Ausgabe;
import propra.splitter.domain.model.Gruppe;

@DisplayName("Der Gruppen-Service ")
public class GruppenTest {

  private Gruppen gruppen;

  private GruppenConnection connection;


  LocalDateTime dt = LocalDateTime.of(2003, 8, 2, 11, 38, 56);
  Set<Ausgabe> ausgaben_big_gruppe =
      Set.of(new Ausgabe("Flug", 100000, "Alex", Set.of("Jens", "Leonie", "Markus", "Kristin"), dt),
          new Ausgabe("Bootstour", 8000, "Jens", Set.of("Jens", "Alex"), dt),
          new Ausgabe("Restaurant", 12099, "Leonie", Set.of("Kristin", "Alex"), dt));

  Gruppe solo_gruppe = new Gruppe(1L, "Urlaub", Set.of("Alex"), Set.of(), false);
  Gruppe small_gruppe = new Gruppe(1L, "Urlaub", Set.of("Alex", "Jens"), Set.of(), false);
  Gruppe big_gruppe =
      new Gruppe(1L, "Urlaub", Set.of("Alex", "Jens", "Leonie", "Markus", "Kristin"),
          ausgaben_big_gruppe, false);

  @BeforeEach
  void setUp() {
    this.connection = mock(GruppenConnection.class);
    this.gruppen = new GruppenImpl(connection);
  }

  /**
   * Works tests
   */

  @Test
  @DisplayName("erstellt eine neue Gruppe")
  public void test_01() {
    // Act
    gruppen.neueGruppe("Alex", "Urlaub");

    // Assert
    verify(connection).saveGruppe(any());
  }

  @Test
  @DisplayName("fügt Teilnehmer einer Gruppe hinzu")
  public void test_02() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    gruppen.neuerTeilnehmer("Alex", 1L, "Jens");
    gruppen.neuerTeilnehmer("Jens", 1L, "Markus");

    // Assert
    verify(connection, times(2)).getGruppe(1L);
    verify(connection, times(2)).saveGruppe(any());
  }

  @Test
  @DisplayName("fügt Ausgaben einer Gruppe hinzu")
  public void test_03() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(big_gruppe);

    // Act
    gruppen.neueAusgabe("Alex", 1L, "Flug", "Alex", 100000,
        Set.of("Jens", "Markus", "Kristin", "Leonie"));
    gruppen.neueAusgabe("Jens", 1L, "Bootstour", "Markus", 8000, Set.of("Jens", "Alex"));
    gruppen.neueAusgabe("Leonie", 1L, "Restaurant", "Leonie", 12099, Set.of("Kristin", "Alex"));

    // Assert
    verify(connection, times(3)).getGruppe(1L);
    verify(connection, times(3)).saveGruppe(any());
  }

  @Test
  @DisplayName("schließt eine Gruppe")
  public void test_04() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    gruppen.schliessen("Alex", 1L);

    // Assert
    verify(connection, times(1)).getGruppe(1L);
    verify(connection, times(1)).saveGruppe(any());
  }

  @Test
  @DisplayName("holt sich alle Gruppen eines Teilnehmers")
  public void test_05() {
    // Act
    Set<Gruppe> alexGruppen = gruppen.getGruppen("Alex");

    // Assert
    verify(connection, times(1)).getGruppen("Alex");
  }

  @Test
  @DisplayName("holt sich eine Gruppe per Id")
  public void test_06() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    gruppen.getGruppe("Alex", 1L);

    // Assert
    verify(connection, times(1)).getGruppe(1L);
  }


  /**
   * Logic fail tests
   */

  @Test
  @DisplayName("erlaubt keine neuen Ausgaben, wenn manche Schuldner nicht in der Gruppe sind")
  public void test_07() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    ThrowingCallable call =
        () -> gruppen.neueAusgabe("Alex", 1L, null, "Alex", 350, Set.of("Alex", "Jens"));

    // Assert
    assertThatExceptionOfType(NotPossibleException.class).isThrownBy(call);
  }

  @Test
  @DisplayName("erlaubt keine neuen Ausgaben, wenn der Glaeubiger nicht in der Gruppe sind")
  public void test_08() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    ThrowingCallable call =
        () -> gruppen.neueAusgabe("Alex", 1L, null, "Jens", 350, Set.of("Alex"));

    // Assert
    assertThatExceptionOfType(NotPossibleException.class).isThrownBy(call);
  }

  /**
   * Unauthorized tests
   */

  @Test
  @DisplayName("erlaubt es Nicht-Teilnehmern nicht Teilnehmer einer Gruppe hinzuzufügen")
  public void test_09() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    ThrowingCallable call = () -> gruppen.neuerTeilnehmer("Kristin", 1L, "Jens");

    // Assert
    assertThatExceptionOfType(NotAllowedException.class).isThrownBy(call);
  }

  @Test
  @DisplayName("erlaubt es Nicht-Teilnehmern nicht Ausgaben einer Gruppe hinzuzufügen")
  public void test_10() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(small_gruppe);

    // Act
    ThrowingCallable call =
        () -> gruppen.neueAusgabe("Kristin", 1L, "", "Alex", 1, Set.of("Alex", "Jens"));

    // Assert
    assertThatExceptionOfType(NotAllowedException.class).isThrownBy(call);
  }

  @Test
  @DisplayName("erlaubt es Nicht-Teilnehmern nicht eine Gruppe zu schließen")
  public void test_11() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    ThrowingCallable call = () -> gruppen.schliessen("Kristin", 1L);

    // Assert
    assertThatExceptionOfType(NotAllowedException.class).isThrownBy(call);
  }

  @Test
  @DisplayName("erlaubt es Nicht-Teilnehmern nicht Gruppen-Infos zu erhalten")
  public void test_15() {
    // Arrange
    when(connection.getGruppe(1L)).thenReturn(solo_gruppe);

    // Act
    ThrowingCallable call = () -> gruppen.getGruppe("Kristin", 1L);

    // Assert
    assertThatExceptionOfType(NotAllowedException.class).isThrownBy(call);
  }
}
